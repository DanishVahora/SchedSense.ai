  services:
    postgres_db:
      image: postgres:15-alpine
      container_name: user_service_postgres
      environment:
        POSTGRES_DB: user_service_db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      ports:
        - "5432:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./services/user-service/init-db:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d user_service_db"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s
      networks:
        - app-network
      restart: unless-stopped

    postgres_provider_db:
      image: postgres:15-alpine
      container_name: service_provider_postgres
      environment:
        POSTGRES_DB: service_provider_db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      ports:
        - "5433:5432"
      volumes:
        - postgres_provider_data:/var/lib/postgresql/data
        - ./services/service-provider-service/init-db:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d service_provider_db"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s
      networks:
        - app-network
      restart: unless-stopped

    pgadmin:
      image: dpage/pgadmin4:latest
      container_name: pgadmin
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: admin
        PGADMIN_CONFIG_SERVER_MODE: 'False'
      ports:
        - "5050:80"
      volumes:
        - pgadmin_data:/var/lib/pgadmin
      depends_on:
        - postgres_db
        - postgres_provider_db
      networks:
        - app-network
      restart: unless-stopped

    voice-service:
      build:
        context: ./services/voice-service
        dockerfile: Dockerfile
      ports:
        - "8000:8000"
      environment:
        - PYTHONUNBUFFERED=1
      networks:
        - app-network
      restart: unless-stopped

    notification-service:
      build:
        context: ./services/notification-service
        dockerfile: Dockerfile
      ports:
        - "3003:3003"
      networks:
        - app-network
      restart: unless-stopped

    user-service:
      build:
        context: ./services/user-service
        dockerfile: Dockerfile
      ports:
        - "3004:3004"
      environment:
        - NODE_ENV=production
        - PORT=3004
        - DB_HOST=postgres_db
        - DB_PORT=5432
        - DB_NAME=user_service_db
        - DB_USER=postgres
        - DB_PASSWORD=postgres
        - JWT_SECRET=MindMesh
        - JWT_EXPIRES_IN=24h
        - DOCKER_DB_HOST=postgres_db
      depends_on:
        postgres_db:
          condition: service_healthy
      networks:
        - app-network
      restart: unless-stopped

    intent-extract-service:
      build:
        context: ./services/intent-extract-service
        dockerfile: Dockerfile
      ports:
        - "8001:8001"
      volumes:
        - ./services/intent-extract-service:/app
      environment:
        - PYTHONUNBUFFERED=1
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
        interval: 30s
        timeout: 10s
        retries: 3
      networks:
        - app-network
      restart: unless-stopped

    intent-validator-service:
      build:
        context: ./services/intent-validator-service
        dockerfile: Dockerfile
      ports:
        - "8002:8002"
      volumes:
        - ./services/intent-validator-service:/app
      environment:
        - PYTHONUNBUFFERED=1
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
        interval: 30s
        timeout: 10s
        retries: 3
      networks:
        - app-network
      restart: unless-stopped


    api-gateway:
        build: ./api-gateway
        ports:
          - "80:80"
        environment:
        - NGINX_PORT=80
        - VOICE_SERVICE_HOST=voice-service
        - VOICE_SERVICE_PORT=8000
        - NOTIFICATION_SERVICE_HOST=notification-service
        - NOTIFICATION_SERVICE_PORT=3003
        - USER_SERVICE_HOST=user-service
        - USER_SERVICE_PORT=3004
        - INTENT_EXTRACT_SERVICE_HOST=intent-extract-service
        - INTENT_EXTRACT_SERVICE_PORT=8001
        - INTENT_VALIDATOR_SERVICE_HOST=intent-validator-service
        - INTENT_VALIDATOR_SERVICE_PORT=8002
        - NGINX_LOG_LEVEL=info
        depends_on:
          - voice-service
          - notification-service
          - user-service
          - intent-extract-service
          - intent-validator-service
          - postgres_db
          - postgres_provider_db
        networks:
          - app-network
        restart: unless-stopped


  networks:
    app-network:
      driver: bridge
      ipam:
        config:
          - subnet: 172.20.0.0/16

  volumes:
    postgres_data:
      driver: local
    postgres_provider_data:
      driver: local
    pgadmin_data:
      driver: local
