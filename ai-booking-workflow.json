{
  "name": "AI Appointment Booking System",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "voice-booking",
        "responseMode": "responseNode"
      },
      "id": "webhook-voice-input",
      "name": "Voice Input Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-1"
            },
            {
              "name": "file",
              "value": "={{ $json.audio_file }}"
            }
          ]
        }
      },
      "id": "speech-to-text",
      "name": "Speech to Text",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [400, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an Intent Recognition Agent for appointment booking. Extract and return ONLY a JSON object with these fields: {\\\"intent\\\": \\\"book_appointment|reschedule|cancel|inquiry\\\", \\\"service_type\\\": \\\"doctor|consultant|beauty|other\\\", \\\"preferred_date\\\": \\\"YYYY-MM-DD or null\\\", \\\"preferred_time\\\": \\\"HH:MM or null\\\", \\\"duration\\\": \\\"minutes or null\\\", \\\"provider_name\\\": \\\"string or null\\\", \\\"urgency\\\": \\\"high|medium|low\\\", \\\"user_id\\\": \\\"extracted from context or null\\\"}. Do not include any explanation, just the JSON.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.text }}\"\n    }\n  ],\n  \"temperature\": 0.1\n}"
      },
      "id": "intent-agent",
      "name": "Intent Recognition Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [600, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ JSON.parse($json.choices[0].message.content).intent }}",
              "operation": "equal",
              "value2": "book_appointment"
            }
          ]
        }
      },
      "id": "intent-router",
      "name": "Intent Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM availability WHERE provider_id = '{{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).provider_name }}' AND date = '{{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).preferred_date }}' AND time_slot = '{{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).preferred_time }}' AND is_available = true LIMIT 1"
      },
      "id": "validate-agent",
      "name": "Validate Agent",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.length }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "availability-check",
      "name": "Availability Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT date, time_slot, provider_name FROM availability WHERE provider_id = '{{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).provider_name }}' AND date >= CURRENT_DATE AND is_available = true ORDER BY date ASC, time_slot ASC LIMIT 5"
      },
      "id": "find-alternatives",
      "name": "Find Alternative Slots",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1400, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are an MCP Server Agent for appointment booking. Based on user preferences and available slots, make the optimal booking decision. Return ONLY a JSON object: {\\\"booking_decision\\\": \\\"confirm|suggest_alternative|request_preference\\\", \\\"selected_slot\\\": {\\\"date\\\": \\\"YYYY-MM-DD\\\", \\\"time\\\": \\\"HH:MM\\\", \\\"provider\\\": \\\"string\\\"}, \\\"confidence_score\\\": 0.9, \\\"reasoning\\\": \\\"brief explanation\\\"}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"User Intent: {{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content) }}\\nMake booking decision for available slot.\"\n    }\n  ],\n  \"temperature\": 0.3\n}"
      },
      "id": "mcp-server",
      "name": "MCP Server",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1400, 200]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "appointments",
        "columns": "user_id, provider_id, appointment_date, appointment_time, duration, status, created_at",
        "additionalFields": {
          "mode": "defineBelow"
        },
        "valuesToSend": {
          "values": [
            {
              "column": "user_id",
              "value": "={{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).user_id || 'default_user' }}"
            },
            {
              "column": "provider_id",
              "value": "={{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.provider }}"
            },
            {
              "column": "appointment_date",
              "value": "={{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.date }}"
            },
            {
              "column": "appointment_time",
              "value": "={{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.time }}"
            },
            {
              "column": "duration",
              "value": "={{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).duration || 30 }}"
            },
            {
              "column": "status",
              "value": "confirmed"
            },
            {
              "column": "created_at",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "booking-agent",
      "name": "Booking Agent",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1600, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE availability SET is_available = false WHERE provider_id = '{{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.provider }}' AND date = '{{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.date }}' AND time_slot = '{{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.time }}'"
      },
      "id": "update-availability",
      "name": "Update Availability",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1800, 200]
    },
    {
      "parameters": {
        "mode": "queue",
        "queue": {
          "queue": "appointment-notifications",
          "options": {
            "durable": true
          }
        },
        "message": "={{ JSON.stringify({\n  type: 'appointment_confirmed',\n  user_id: JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).user_id,\n  provider: JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.provider,\n  date: JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.date,\n  time: JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot.time,\n  timestamp: new Date().toISOString()\n}) }}"
      },
      "id": "notification-queue",
      "name": "Notification Queue",
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a friendly appointment booking assistant. Generate a natural voice response for the user about their appointment confirmation. Keep it conversational and include all relevant details.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Generate a confirmation message for: {{ JSON.parse($('MCP Server').item.json.choices[0].message.content) }}\"\n    }\n  ],\n  \"temperature\": 0.7\n}"
      },
      "id": "response-generator",
      "name": "Generate Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2200, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/speech",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"tts-1\",\n  \"input\": \"{{ $json.choices[0].message.content }}\",\n  \"voice\": \"alloy\",\n  \"response_format\": \"mp3\",\n  \"speed\": 1.0\n}"
      },
      "id": "text-to-speech",
      "name": "Text to Speech",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2400, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"{{ $('Generate Response').item.json.choices[0].message.content }}\",\n  \"appointment_details\": {{ JSON.parse($('MCP Server').item.json.choices[0].message.content).selected_slot }},\n  \"audio_response\": \"{{ $json.audio_url || 'Audio generated successfully' }}\"\n}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2600, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful appointment booking assistant. The requested time slot is not available. Suggest alternative time slots in a friendly, conversational manner.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Original request: {{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content) }}\\nAvailable alternatives: {{ $json }}\\nGenerate a helpful response suggesting alternatives.\"\n    }\n  ],\n  \"temperature\": 0.7\n}"
      },
      "id": "alternative-response",
      "name": "Alternative Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": \"{{ $json.choices[0].message.content }}\",\n  \"alternatives\": {{ $('Find Alternative Slots').all() }},\n  \"requires_user_selection\": true\n}"
      },
      "id": "alternative-response-webhook",
      "name": "Alternative Response Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1800, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"error\": \"Invalid intent or unsupported operation\",\n  \"message\": \"I can help you book, reschedule, or cancel appointments. Please try again with a clear request.\",\n  \"intent_detected\": \"{{ JSON.parse($('Intent Recognition Agent').item.json.choices[0].message.content).intent }}\"\n}",
        "responseCode": 400
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1000, 500]
    }
  ],
  "connections": {
    "Voice Input Webhook": {
      "main": [
        [
          {
            "node": "Speech to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Speech to Text": {
      "main": [
        [
          {
            "node": "Intent Recognition Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent Recognition Agent": {
      "main": [
        [
          {
            "node": "Intent Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent Router": {
      "main": [
        [
          {
            "node": "Validate Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Agent": {
      "main": [
        [
          {
            "node": "Availability Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Availability Check": {
      "main": [
        [
          {
            "node": "MCP Server",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Find Alternative Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Alternative Slots": {
      "main": [
        [
          {
            "node": "Alternative Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Server": {
      "main": [
        [
          {
            "node": "Booking Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Booking Agent": {
      "main": [
        [
          {
            "node": "Update Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Availability": {
      "main": [
        [
          {
            "node": "Notification Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notification Queue": {
      "main": [
        [
          {
            "node": "Generate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Response": {
      "main": [
        [
          {
            "node": "Text to Speech",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text to Speech": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alternative Response": {
      "main": [
        [
          {
            "node": "Alternative Response Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    "appointment-booking",
    "ai-agent",
    "voice-integration"
  ],
  "triggerCount": 0,
  "updatedAt": "2025-01-25T12:00:00.000Z",
  "versionId": "1"
}
